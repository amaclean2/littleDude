/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
*/

import React, { useRef, useState } from "react";
import { useGLTF, useAnimations } from "@react-three/drei";
import { useFrame } from "@react-three/fiber";
import { useKeyContext } from "../KeyContext";
import { useIdleState, useWalkState } from "./states";
import littleDudeModel from "../models/littleDude.gltf";

export const LittleDude = (props) => {
  const group = useRef();
  const time = Date.now();
  const { nodes, materials, animations } = useGLTF(littleDudeModel);
  const { actions } = useAnimations(animations, group);

  const [prevDudeState, setPrevDudeState] = useState(null);

  const { keyStateMap } = useKeyContext();
  const { setIdle } = useIdleState(actions);
  const {
    setWalk,
    calibrateMovement,
    makeRun,
    makeMoveForward,
    makeMoveBackward,
    makeTurnLeft,
    makeTurnRight,
  } = useWalkState({actions, target: group.current});

  useFrame(() => {
    let newDudeState;
    if (
      keyStateMap.forward ||
      keyStateMap.backward ||
      keyStateMap.left ||
      keyStateMap.right
    ) {
      newDudeState = setWalk(prevDudeState);
    } else {
      newDudeState = setIdle(prevDudeState);
    }

    setPrevDudeState(newDudeState);

    const now = Date.now() - time;
    const elapsedTime = now / 1000;

    calibrateMovement({ elapsedTime });

    if (keyStateMap.shift) {
      console.log("go");
      makeRun();
    }

    if (keyStateMap.forward) {
      makeMoveForward();
    }

    if (keyStateMap.backward) {
      makeMoveBackward();
    }

    if (keyStateMap.left) {
      makeTurnLeft();
    }

    if (keyStateMap.right) {
      makeTurnRight();
    }
  });

  return (
    <group ref={group} position={[8, 0, 12]} dispose={null}>
      <group rotation={[0, 0, 0]} position={[0, 2.75, 0]}>
        <primitive object={nodes.LegPullTargetL} />
        <primitive object={nodes.LegPullTargetR} />
        <primitive object={nodes.Center} />
        <skinnedMesh
          geometry={nodes.LittleDude.geometry}
          material={materials["Material.001"]}
          skeleton={nodes.LittleDude.skeleton}
        />
      </group>
    </group>
  );
};

useGLTF.preload("/littleDude.gltf");
